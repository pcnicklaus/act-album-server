.actForm__container {
    padding: 1rem;
    font-family: 'Comfortaa';
    border: 1px solid darkgrey;
    /* font-size: 1.2rem; */
}
.actForm__container__title {
    padding: 0;
    margin: 0;
    text-align: center;
    border-bottom: 1px solid;
    padding-bottom: .75rem;
}
.actForm__container__title > h3 {
    padding: 0;
    margin: 0;
}
.actForm {
    width: 100%
}
.actForm__body {

}
.actForm__radio__buttons {
    padding-top: 1rem;
    display: flex;
    flex-direction: column;
    justify-content: center;
}

.share__or__private {
  padding-bottom: 1rem;
}
.actForm__radio__container {
    margin-left: 2rem;
}
.actForm__radio {

}
.actForm__radio__label {
    margin-left: 3px;
}

.actForm__radio__input {
    height: 1.1rem;
    width: 1.1rem;
}

.actForm__field {
    margin-bottom: 1rem;
    display: block;
}

.actForm__field__input {
    width: 100%;
    height: 2rem;
    font-size: 1.3rem;
    outline: none;
    border: none;
    padding: 0 10px;
}
.actForm__field__label {
    display: block;
    margin-bottom: .5rem;
}

.actForm__text-help {

}

.actForm__field__title, .actForm__field__description, .actForm__field__image {
    padding: 0;
    border: none;
}
.actForm__field__title {
    display: block;
   
}
.actForm__field__description {
   
}
.actForm__field__image {
   
}

.actForm__create__button {
    height: 2rem;
    margin: 1.5rem auto 0 auto;
    padding: .1rem 2rem;
    border-radius: 50px;
    font-size: 1.5rem;
    font-family: inherit;
    border: none;
    display: block;

}



.radio + .radio-label:before {
    content: '';
    background: $color1;
    border-radius: 100%;
    border: 1px solid darken($color1, 25%);
    display: inline-block;
    width: 1.7em;
    height: 1.7em;
    position: relative;
    top: -0.2em;
    margin-right: 1em; 
    vertical-align: top;
    cursor: pointer;
    text-align: center;
    transition: all 250ms ease;
}
.radio + .radio-label:checked + .radio-label:before {
    background-color: $color2;
    box-shadow: inset 0 0 0 4px $color1;
} 
.radio + .radio-label:focus + .radio-label:before {
    outline: none;
    border-color: $color2;
}

.radio + .radio-label:disabled + .radio-label:before {
    box-shadow: inset 0 0 0 4px $color1;
    border-color: darken($color1, 25%);
    background: darken($color1, 25%);
}

.radio + .radio-label + .radio-label:empty:before {
    margin-right: 0;
}
/* .radio {
    margin: 0.5rem;
    input[type="radio"] {
      position: absolute;
      opacity: 0;
      + .radio-label {
        &:before {
          content: '';
          background: $color1;
          border-radius: 100%;
          border: 1px solid darken($color1, 25%);
          display: inline-block;
          width: 1.4em;
          height: 1.4em;
          position: relative;
          top: -0.2em;
          margin-right: 1em; 
          vertical-align: top;
          cursor: pointer;
          text-align: center;
          transition: all 250ms ease;
        }
      }
      &:checked {
        + .radio-label {
          &:before {
            background-color: $color2;
            box-shadow: inset 0 0 0 4px $color1;
          }
        }
      }
      &:focus {
        + .radio-label {
          &:before {
            outline: none;
            border-color: $color2;
          }
        }
      }
      &:disabled {
        + .radio-label {
          &:before {
            box-shadow: inset 0 0 0 4px $color1;
            border-color: darken($color1, 25%);
            background: darken($color1, 25%);
          }
        }
      }
      + .radio-label {
        &:empty {
          &:before {
            margin-right: 0;
          }
        }
      }
    }
} */



/* import _ from 'lodash';
import React, { Component } from 'react';
import { connect } from 'react-redux';
import { reduxForm } from 'redux-form';

// import { browserHistory } from 'react-router';

import * as actions from '../actions'

const FORM_FIELDS = {
  kind: {
    type: 'input',
    label: 'what kind?',
    name: 'kind',
    value: 'thank',
    class: 'radio'
  },
  kind2: {
    type: 'input',
    label: 'what kind? Do or Thank?',
    name: 'kind',
    value: 'do',
    class: 'radio'
  },
  title: {
    type: 'input',
    label: 'got a title?',
    class: '',
  },
  description: {
    type: 'textarea',
    label: 'why are they so awesome? why do we need them? what problems can they solve?',
    class: '',
  },
  imageURL: {
    type: 'input',
    label: 'please include a link to a good pic of them! not on horrible sweater day...',
    class: ''
  }
}

class ActForm extends Component {

  handleFormSubmit(formData) {
    console.log('formData', formData)
    const { resetForm } = this.props;
    this.props.createAct(formData, () => {
        console.log('this.prop asdfdfdffdfs', this.props);

       this.props.resetForm(); 
      //  this.props.fetchUserActs()
      this.props.history.push('/journal')
      });
  }

  renderField(configObject, field) {
    //there's one field helper per field. it has all the good stuff
    const fieldHelper = this.props.fields[field]

    return (
      <fieldset 
        className={`form-group ${configObject.class} ${ fieldHelper.touched && fieldHelper.invalid ? 'has-danger' : '' }`} 
        key={ configObject.label }
       
      >
        <label>
          { configObject.label }
        </label>
        <configObject.type 
          type={ field.type } 
          className="form-control" {...fieldHelper}
          name={ configObject.name }
          value={ configObject.value }
        >
          { configObject.value }
        </configObject.type>

        <div className="text-help">
          { fieldHelper.touched ? fieldHelper.error : '' }
        </div>
      </fieldset>
    )
  }

  render() {

    const { handleSubmit } = this.props;

    return (
      <div className="actForm__container">
      
        <div className="actForm__container__title">
          <h3>New Act</h3>
        </div>

        <div>

          <form
            className="act-form"
            onSubmit={ handleSubmit(this.handleFormSubmit.bind(this)) }
          >
            <div>

              <div>
                { _.map(FORM_FIELDS, this.renderField.bind(this)) }
              </div>

              <div>
                <button action="submit" className="btn pull-right" style={{ backgroundColor: '#004687', color: '#fff' }}>Create</button>
              </div>

            </div>
          </form>

        </div>

      </div>
    );
  }
}

const styles = {
  title: {
    fontSize: 6 + 'em',
    fontFamily: 'Dosis',
  },

  form: {
    fontSize: 1.2 + 'em',
    fontWeight: 'bold',
  }

}


function validate(values) {
  const errors = {};

  _.map(FORM_FIELDS, (field, value) => {
    if(!values[value]) {
      errors[value] = `enter a ${value}`
    }
  })

  return errors;
}

function mapStateToProps(state) {
  // console.log('state act form', state)
  // return {
  //   user: state.auth.user
  // }
  return state;
}
export default reduxForm({
  form: 'act-form',
  fields: _.keys(FORM_FIELDS),
  validate
}, mapStateToProps, actions)(ActForm);

//// Dosis|Droid+Sans|Lobster|Nunito|PT+Sans+Narrow|Quicksand|Shadows+Into+Light|Varela+Round */
